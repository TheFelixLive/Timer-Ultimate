{
	"format_version": "1.10.0",
	"animation_controllers": {
	  "controller.animation.sneak.player_ons": {
		"states": {
		  "runtimes":{
			"transitions": [{"on_check":"!query.is_sneaking"}]
		  },
		  "on_check":{
			"transitions": [{"on_sneaking":"query.is_sneaking"}]
		  },
		  "on_sneaking": {
			"transitions":[{"runtimes":"1"}],
			"on_entry": [
			  "/execute if score mode timer_settings matches 1 if score do_count timer_settings matches 1 if score ice_challenge timer_addon matches 1 run tag @s[tag=sneak_for_ice] add look_temp_sneak",
			  "/execute if score mode timer_settings matches 1 if score do_count timer_settings matches 1 if score ice_challenge timer_addon matches 1 run tag @s[tag=!sneak_for_ice] add sneak_for_ice",
			  "/execute if score mode timer_settings matches 1 if score do_count timer_settings matches 1 if score gravity timer_addon matches 1 run tag @s[tag=!sneak_for_ice] add sneak_for_ice",
			  "/execute if score mode timer_settings matches 1 if score do_count timer_settings matches 1 if score sneak_same_death timer_addon matches 1 run scoreboard players set reset_type timer_settings 1",
			  "/execute if score mode timer_settings matches 1 if score do_count timer_settings matches 1 if score sneak_same_death timer_addon matches 1 run function timer/system_do_not_use/end_cmo",
  
			  "/tag @s[tag=look_temp_sneak] remove sneak_for_ice",
			  "/tag @s remove look_temp_sneak"
			  ]
			}
		  }
		},
		"controller.animation.sneak.player_not": {
		  "states": {
			"runtimes":{
			  "transitions": [{"on_check":"query.is_sneaking"}]
			},
			"on_check":{
			  "transitions": [{"on_sneaking":"!query.is_sneaking"}]
			},
			"on_sneaking": {
			  "transitions":[{"on_check":"1"}],
			  "on_entry": [
				  "/execute if score mode timer_settings matches 1 if score do_count timer_settings matches 1 if score gravity timer_addon matches 1 run tag @s remove sneak_for_ice"
				]
			  }
			}
		  },
		  "controller.animation.swimming": {
		  "states": {
			  "runtimes":{
			  "transitions": [{"on_check":"!query.is_swimming"}]
			  },
			  "on_check":{
			  "transitions": [{"on_sneaking":"query.is_swimming"}]
			  },
			  "on_sneaking": {
			  "transitions":[{"on_check":"1"}],
			  "on_entry": [
				  "/execute if score mode timer_settings matches 1 if score do_count timer_settings matches 1 if score movement timer_addon matches 2 run scoreboard players set reset_type timer_settings 1",
				  "/execute if score mode timer_settings matches 1 if score do_count timer_settings matches 1 if score movement timer_addon matches 2 run function timer/system_do_not_use/end_cmo"
				  ]
			  }
			  }
		  },
		  "controller.animation.sprinting": {
			"states": {
				"runtimes":{
				"transitions": [{"on_check":"!query.is_sprinting"}]
				},
				"on_check":{
				"transitions": [{"on_sneaking":"query.is_sprinting"}]
				},
				"on_sneaking": {
				"transitions":[{"on_check":"1"}],
				"on_entry": [
					"/execute if score mode timer_settings matches 1 if score do_count timer_settings matches 1 if score movement timer_addon matches 3 run scoreboard players set reset_type timer_settings 1",
					"/execute if score mode timer_settings matches 1 if score do_count timer_settings matches 1 if score movement timer_addon matches 3 run function timer/system_do_not_use/end_cmo"
					]
				}
				}
			},
		  "controller.animation.jump": {
			  "states": {
				  "runtimes":{
				  "transitions": [{"on_check":"!query.is_jumping"}]
				  },
				  "on_check":{
				  "transitions": [{"on_sneaking":"query.is_jumping"}]
				  },
				  "on_sneaking": {
				  "transitions":[{"on_check":"1"}],
				  "on_entry": [
					  "/execute if score mode timer_settings matches 1 if score do_count timer_settings matches 1 if score movement timer_addon matches 1 run scoreboard players set reset_type timer_settings 1",
					  "/execute if score mode timer_settings matches 1 if score do_count timer_settings matches 1 if score movement timer_addon matches 1 run function timer/system_do_not_use/end_cmo"
					  ]
				  }
				  }
			  },
		"controller.animation.ground": {
			  "initial_state": "ground",
			  "states": {
				  "ground": {
					  "on_entry": [
						  "/execute if score mode timer_settings matches 1 if score do_count timer_settings matches 1 if score gravity timer_addon matches 1 unless score ms timer_time matches ..5 run scoreboard players set reset_type timer_settings 1",
						  "/execute if score mode timer_settings matches 1 if score do_count timer_settings matches 1 if score gravity timer_addon matches 1 unless score ms timer_time matches ..5 run function timer/system_do_not_use/end_cmo"
					  ],
					  "transitions": [
						  {
							  "flying": "!query.is_on_ground"
						  }
					  ]
				  },
				  "flying": {
					  "transitions": [{ "ground": "query.is_on_ground" }]
				  }
			  }
		  },
	  "controller.animation.player.speed_x_afk": {
			  "states": {
				  "default": {
					  "transitions": [
						  {
							  "stands_still": "!query.is_moving"
						  }
					  ]
					  
				  },
				  "stands_still": {
					  "on_entry": [
						  "v.afk = q.life_time;"
					  ],
					  "transitions": [
						  {
							  "speed_warning": "(q.life_time - v.afk) >= 5 && !q.is_moving"
						  },
						  {
							  "default": "q.is_moving"
						  }
					  ]
				  },
				  "speed_warning": {
					  "on_entry": [
						  "/execute if score mode timer_settings matches 1 if score do_count timer_settings matches 1 if score speed_x timer_addon matches 1 run scoreboard players set @s timer_show_actionbar 2",
						  "/execute if score mode timer_settings matches 1 if score do_count timer_settings matches 1 if score speed_x timer_addon matches 1 run titleraw @s actionbar {\"rawtext\":[{\"text\":\"If you stay 5 seconds afk, the challenge ends\"}]}",
						  "/execute if score mode timer_settings matches 1 if score do_count timer_settings matches 1 if score speed_x timer_addon matches 1 if score custom_music timer_settings matches 0 run playsound mob.breeze.inhale",
						  "/execute if score mode timer_settings matches 1 if score do_count timer_settings matches 1 if score speed_x timer_addon matches 1 if score custom_music timer_settings matches 1 run playsound timeru.speed_warning"
					  ],
					  "transitions": [
						  {
							  "stands_still_2": "true"
						  }
					  ]
				  },
  
				  "stands_still_2": {
					  "on_entry": [
						  "v.afk = q.life_time;"
					  ],
					  "transitions": [
						  {
							  "speed_kill": "(q.life_time - v.afk) >= 5 && !q.is_moving"
						  },
						  {
							  "default": "q.is_moving"
						  }
					  ]
				  },
  
				  "speed_kill": {
					  "on_entry": [
						  "/execute if score mode timer_settings matches 1 if score do_count timer_settings matches 1 if score speed_x timer_addon matches 1 run scoreboard players set reset_type timer_settings 1",
						  "/execute if score mode timer_settings matches 1 if score do_count timer_settings matches 1 if score speed_x timer_addon matches 1 run function timer/system_do_not_use/end_cmo"
					  ],
					  "transitions": [
						  {
							  "default": "true"
						  }
					  ]
				  }
			  }
		  }
	}
  }
  